// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"newtest/internal/sdk"
	"newtest/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"newtest/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ZoneResource{}
var _ resource.ResourceWithImportState = &ZoneResource{}

func NewZoneResource() resource.Resource {
	return &ZoneResource{}
}

// ZoneResource defines the resource implementation.
type ZoneResource struct {
	client *sdk.Newtest
}

// ZoneResourceModel describes the resource data model.
type ZoneResourceModel struct {
	Account               *ZoneAccount    `tfsdk:"account"`
	AccountID             types.Int64     `tfsdk:"account_id"`
	AgentMode             types.String    `tfsdk:"agent_mode"`
	APIProxy              types.String    `tfsdk:"api_proxy"`
	AutoRecoverPowerState types.Bool      `tfsdk:"auto_recover_power_state"`
	Code                  types.String    `tfsdk:"code"`
	Config                *ZoneConfig     `tfsdk:"config"`
	ConsoleKeymap         types.String    `tfsdk:"console_keymap"`
	ContainerMode         types.String    `tfsdk:"container_mode"`
	CostingMode           types.String    `tfsdk:"costing_mode"`
	CostLastSync          types.String    `tfsdk:"cost_last_sync"`
	CostLastSyncDuration  types.Int64     `tfsdk:"cost_last_sync_duration"`
	CostStatus            types.String    `tfsdk:"cost_status"`
	CostStatusDate        types.String    `tfsdk:"cost_status_date"`
	CostStatusMessage     types.String    `tfsdk:"cost_status_message"`
	Credential            *ZoneCredential `tfsdk:"credential"`
	DarkImagePath         types.String    `tfsdk:"dark_image_path"`
	DateCreated           types.String    `tfsdk:"date_created"`
	Description           types.String    `tfsdk:"description"`
	DomainName            types.String    `tfsdk:"domain_name"`
	Enabled               types.Bool      `tfsdk:"enabled"`
	ExternalID            types.String    `tfsdk:"external_id"`
	GroupID               types.Int64     `tfsdk:"group_id"`
	Groups                []ZoneGroups    `tfsdk:"groups"`
	GuidanceMode          types.String    `tfsdk:"guidance_mode"`
	ID                    types.Int64     `tfsdk:"id"`
	ImagePath             types.String    `tfsdk:"image_path"`
	InventoryLevel        types.String    `tfsdk:"inventory_level"`
	LastSync              types.String    `tfsdk:"last_sync"`
	LastSyncDuration      types.Int64     `tfsdk:"last_sync_duration"`
	LastUpdated           types.String    `tfsdk:"last_updated"`
	LinkedAccountID       types.Int64     `tfsdk:"linked_account_id"`
	Location              types.String    `tfsdk:"location"`
	Name                  types.String    `tfsdk:"name"`
	NetworkDomain         *ZoneAccount    `tfsdk:"network_domain"`
	NetworkServer         *ZoneAccount    `tfsdk:"network_server"`
	NextRunDate           types.String    `tfsdk:"next_run_date"`
	Owner                 *ZoneAccount    `tfsdk:"owner"`
	ProvisioningProxy     types.String    `tfsdk:"provisioning_proxy"`
	RegionCode            types.String    `tfsdk:"region_code"`
	ScalePriority         types.Int64     `tfsdk:"scale_priority"`
	SecurityMode          types.String    `tfsdk:"security_mode"`
	SecurityServer        *ZoneAccount    `tfsdk:"security_server"`
	ServerCount           types.Int64     `tfsdk:"server_count"`
	ServiceVersion        types.String    `tfsdk:"service_version"`
	Stats                 *ZoneStats      `tfsdk:"stats"`
	Status                types.String    `tfsdk:"status"`
	StatusDate            types.String    `tfsdk:"status_date"`
	StatusMessage         types.String    `tfsdk:"status_message"`
	StorageMode           types.String    `tfsdk:"storage_mode"`
	Success               types.Bool      `tfsdk:"success"`
	Timezone              types.String    `tfsdk:"timezone"`
	UserDataLinux         types.String    `tfsdk:"user_data_linux"`
	UserDataWindows       types.String    `tfsdk:"user_data_windows"`
	UUID                  types.String    `tfsdk:"uuid"`
	Visibility            types.String    `tfsdk:"visibility"`
	Zone                  *Zone           `tfsdk:"zone"`
	ZoneType              *ZoneZoneType   `tfsdk:"zone_type"`
	ZoneTypeID            types.Int64     `tfsdk:"zone_type_id"`
}

func (r *ZoneResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

func (r *ZoneResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Zone Resource",

		Attributes: map[string]schema.Attribute{
			"account": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
			},
			"account_id": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"agent_mode": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"api_proxy": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"auto_recover_power_state": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"code": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"config": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"zone_vcenter_config": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"enable_network_type_selection": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"api_url": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"api_version": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"appliance_url": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"backup_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"certificate_provider": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"cluster": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_cm_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_cmdb_discovery": schema.BoolAttribute{
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_cmdb_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_management_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"datacenter": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"datacenter_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"datacenter_name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"disk_storage_type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"distributed_worker_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"dns_integration_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"enable_disk_type_selection": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"enable_vnc": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"hide_host_selection": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"import_existing": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"kube_url": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"network_server": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
								},
							},
							"network_server_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"password": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"password_hash": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"replication_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"resource_pool": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"resource_pool_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"rpc_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"security_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"security_server": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"service_registry_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"username": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
					"zone_aws_config": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"use_host_credentials": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"access_key": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"appliance_url": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"backup_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"certificate_provider": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_cmdb_discovery": schema.BoolAttribute{
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_management_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_access_key": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_bucket": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_bucket_name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_folder": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_region": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_report": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_report_name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_secret_key": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"costing_secret_key_hash": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"datacenter_name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"dns_integration_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"ebs_encryption": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"endpoint": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"image_store_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"is_vpc": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"network_server": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
								},
							},
							"network_server_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"replication_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"secret_key": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"secret_key_hash": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"security_server": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"service_registry_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"sts_assume_role": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"vpc": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
					"zone_azure_config": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"account_type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"appliance_url": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"azure_costing_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"backup_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"certificate_provider": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"client_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"client_secret": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"client_secret_hash": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"cloud_type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_cmdb_discovery": schema.BoolAttribute{
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_cmdb_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_management_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"csp_client_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"csp_client_secret": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"csp_client_secret_hash": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"csp_customer": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"csp_tenant_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"datacenter_name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"disk_encryption": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"dns_integration_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"encryption_set": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"import_existing": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"inventory_level": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"network_server": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
								},
							},
							"network_server_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"replication_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"resource_group": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"rpc_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"security_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"security_server": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"service_registry_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"subscriber_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"tenant_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
					"zone_gcp_config": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"appliance_url": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"backup_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"certificate_provider": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"client_email": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"config_management_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"datacenter_name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"dns_integration_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"google_region_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"import_existing": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"network_server": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
								},
							},
							"network_server_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"private_key": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"private_key_hash": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"project_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"replication_mode": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"security_server": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"service_registry_id": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
			},
			"console_keymap": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"container_mode": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"costing_mode": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"cost_last_sync": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"cost_last_sync_duration": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"cost_status": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"cost_status_date": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"cost_status_message": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"credential": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"zone_credential_1": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
					"zone_credential_2": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"name": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
			},
			"dark_image_path": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Dark logo image URL`,
			},
			"date_created": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Optional description field if you want to put more info there`,
			},
			"domain_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"enabled": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"external_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"group_id": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Specifies which Server group this cloud should be assigned to`,
			},
			"groups": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"account_id": schema.Int64Attribute{
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplace(),
							},
							Optional: true,
						},
						"id": schema.Int64Attribute{
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplace(),
							},
							Optional: true,
						},
						"name": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							Optional: true,
						},
					},
				},
			},
			"guidance_mode": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"id": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"image_path": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Logo image URL`,
			},
			"inventory_level": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"last_sync": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"last_sync_duration": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"last_updated": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"linked_account_id": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Linked Account ID (enter commercial ID to get costing for AWS Govcloud)`,
			},
			"location": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"network_domain": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
			},
			"network_server": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
			},
			"next_run_date": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"owner": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
			},
			"provisioning_proxy": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"region_code": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"scale_priority": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"security_mode": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"security_server": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
			},
			"server_count": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"service_version": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"stats": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"server_counts": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"all": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"baremetal": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"container_host": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"host": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"hypervisor": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"unmanaged": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
							"vm": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Optional: true,
							},
						},
					},
				},
			},
			"status": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"status_date": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"status_message": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"storage_mode": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"success": schema.BoolAttribute{
				Computed: true,
			},
			"timezone": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"user_data_linux": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"user_data_windows": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"uuid": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"visibility": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"zone": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"account": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"account_id": schema.Int64Attribute{
						Computed: true,
					},
					"agent_mode": schema.StringAttribute{
						Computed: true,
					},
					"api_proxy": schema.StringAttribute{
						Computed: true,
					},
					"auto_recover_power_state": schema.BoolAttribute{
						Computed: true,
					},
					"code": schema.StringAttribute{
						Computed: true,
					},
					"config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"zone_vcenter_config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"enable_network_type_selection": schema.StringAttribute{
										Computed: true,
									},
									"api_url": schema.StringAttribute{
										Computed: true,
									},
									"api_version": schema.StringAttribute{
										Computed: true,
									},
									"appliance_url": schema.StringAttribute{
										Computed: true,
									},
									"backup_mode": schema.StringAttribute{
										Computed: true,
									},
									"certificate_provider": schema.StringAttribute{
										Computed: true,
									},
									"cluster": schema.StringAttribute{
										Computed: true,
									},
									"config_cm_id": schema.StringAttribute{
										Computed: true,
									},
									"config_cmdb_discovery": schema.BoolAttribute{
										Computed: true,
									},
									"config_cmdb_id": schema.StringAttribute{
										Computed: true,
									},
									"config_management_id": schema.StringAttribute{
										Computed: true,
									},
									"datacenter": schema.StringAttribute{
										Computed: true,
									},
									"datacenter_id": schema.StringAttribute{
										Computed: true,
									},
									"datacenter_name": schema.StringAttribute{
										Computed: true,
									},
									"disk_storage_type": schema.StringAttribute{
										Computed: true,
									},
									"distributed_worker_id": schema.StringAttribute{
										Computed: true,
									},
									"dns_integration_id": schema.StringAttribute{
										Computed: true,
									},
									"enable_disk_type_selection": schema.StringAttribute{
										Computed: true,
									},
									"enable_vnc": schema.StringAttribute{
										Computed: true,
									},
									"hide_host_selection": schema.StringAttribute{
										Computed: true,
									},
									"import_existing": schema.StringAttribute{
										Computed: true,
									},
									"kube_url": schema.StringAttribute{
										Computed: true,
									},
									"network_server": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"network_server_id": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"password_hash": schema.StringAttribute{
										Computed: true,
									},
									"replication_mode": schema.StringAttribute{
										Computed: true,
									},
									"resource_pool": schema.StringAttribute{
										Computed: true,
									},
									"resource_pool_id": schema.StringAttribute{
										Computed: true,
									},
									"rpc_mode": schema.StringAttribute{
										Computed: true,
									},
									"security_mode": schema.StringAttribute{
										Computed: true,
									},
									"security_server": schema.StringAttribute{
										Computed: true,
									},
									"service_registry_id": schema.StringAttribute{
										Computed: true,
									},
									"username": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"zone_aws_config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"use_host_credentials": schema.StringAttribute{
										Computed: true,
									},
									"access_key": schema.StringAttribute{
										Computed: true,
									},
									"appliance_url": schema.StringAttribute{
										Computed: true,
									},
									"backup_mode": schema.StringAttribute{
										Computed: true,
									},
									"certificate_provider": schema.StringAttribute{
										Computed: true,
									},
									"config_cmdb_discovery": schema.BoolAttribute{
										Computed: true,
									},
									"config_management_id": schema.StringAttribute{
										Computed: true,
									},
									"costing_access_key": schema.StringAttribute{
										Computed: true,
									},
									"costing_bucket": schema.StringAttribute{
										Computed: true,
									},
									"costing_bucket_name": schema.StringAttribute{
										Computed: true,
									},
									"costing_folder": schema.StringAttribute{
										Computed: true,
									},
									"costing_region": schema.StringAttribute{
										Computed: true,
									},
									"costing_report": schema.StringAttribute{
										Computed: true,
									},
									"costing_report_name": schema.StringAttribute{
										Computed: true,
									},
									"costing_secret_key": schema.StringAttribute{
										Computed: true,
									},
									"costing_secret_key_hash": schema.StringAttribute{
										Computed: true,
									},
									"datacenter_name": schema.StringAttribute{
										Computed: true,
									},
									"dns_integration_id": schema.StringAttribute{
										Computed: true,
									},
									"ebs_encryption": schema.StringAttribute{
										Computed: true,
									},
									"endpoint": schema.StringAttribute{
										Computed: true,
									},
									"image_store_id": schema.StringAttribute{
										Computed: true,
									},
									"is_vpc": schema.StringAttribute{
										Computed: true,
									},
									"network_server": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"network_server_id": schema.StringAttribute{
										Computed: true,
									},
									"replication_mode": schema.StringAttribute{
										Computed: true,
									},
									"secret_key": schema.StringAttribute{
										Computed: true,
									},
									"secret_key_hash": schema.StringAttribute{
										Computed: true,
									},
									"security_server": schema.StringAttribute{
										Computed: true,
									},
									"service_registry_id": schema.StringAttribute{
										Computed: true,
									},
									"sts_assume_role": schema.StringAttribute{
										Computed: true,
									},
									"vpc": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"zone_azure_config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"account_type": schema.StringAttribute{
										Computed: true,
									},
									"appliance_url": schema.StringAttribute{
										Computed: true,
									},
									"azure_costing_mode": schema.StringAttribute{
										Computed: true,
									},
									"backup_mode": schema.StringAttribute{
										Computed: true,
									},
									"certificate_provider": schema.StringAttribute{
										Computed: true,
									},
									"client_id": schema.StringAttribute{
										Computed: true,
									},
									"client_secret": schema.StringAttribute{
										Computed: true,
									},
									"client_secret_hash": schema.StringAttribute{
										Computed: true,
									},
									"cloud_type": schema.StringAttribute{
										Computed: true,
									},
									"config_cmdb_discovery": schema.BoolAttribute{
										Computed: true,
									},
									"config_cmdb_id": schema.StringAttribute{
										Computed: true,
									},
									"config_management_id": schema.StringAttribute{
										Computed: true,
									},
									"csp_client_id": schema.StringAttribute{
										Computed: true,
									},
									"csp_client_secret": schema.StringAttribute{
										Computed: true,
									},
									"csp_client_secret_hash": schema.StringAttribute{
										Computed: true,
									},
									"csp_customer": schema.StringAttribute{
										Computed: true,
									},
									"csp_tenant_id": schema.StringAttribute{
										Computed: true,
									},
									"datacenter_name": schema.StringAttribute{
										Computed: true,
									},
									"disk_encryption": schema.StringAttribute{
										Computed: true,
									},
									"dns_integration_id": schema.StringAttribute{
										Computed: true,
									},
									"encryption_set": schema.StringAttribute{
										Computed: true,
									},
									"import_existing": schema.StringAttribute{
										Computed: true,
									},
									"inventory_level": schema.StringAttribute{
										Computed: true,
									},
									"network_server": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"network_server_id": schema.StringAttribute{
										Computed: true,
									},
									"replication_mode": schema.StringAttribute{
										Computed: true,
									},
									"resource_group": schema.StringAttribute{
										Computed: true,
									},
									"rpc_mode": schema.StringAttribute{
										Computed: true,
									},
									"security_mode": schema.StringAttribute{
										Computed: true,
									},
									"security_server": schema.StringAttribute{
										Computed: true,
									},
									"service_registry_id": schema.StringAttribute{
										Computed: true,
									},
									"subscriber_id": schema.StringAttribute{
										Computed: true,
									},
									"tenant_id": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"zone_gcp_config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"appliance_url": schema.StringAttribute{
										Computed: true,
									},
									"backup_mode": schema.StringAttribute{
										Computed: true,
									},
									"certificate_provider": schema.StringAttribute{
										Computed: true,
									},
									"client_email": schema.StringAttribute{
										Computed: true,
									},
									"config_management_id": schema.StringAttribute{
										Computed: true,
									},
									"datacenter_name": schema.StringAttribute{
										Computed: true,
									},
									"dns_integration_id": schema.StringAttribute{
										Computed: true,
									},
									"google_region_id": schema.StringAttribute{
										Computed: true,
									},
									"import_existing": schema.StringAttribute{
										Computed: true,
									},
									"network_server": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"network_server_id": schema.StringAttribute{
										Computed: true,
									},
									"private_key": schema.StringAttribute{
										Computed: true,
									},
									"private_key_hash": schema.StringAttribute{
										Computed: true,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
									},
									"replication_mode": schema.StringAttribute{
										Computed: true,
									},
									"security_server": schema.StringAttribute{
										Computed: true,
									},
									"service_registry_id": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"console_keymap": schema.StringAttribute{
						Computed: true,
					},
					"container_mode": schema.StringAttribute{
						Computed: true,
					},
					"cost_last_sync": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"cost_last_sync_duration": schema.Int64Attribute{
						Computed: true,
					},
					"cost_status": schema.StringAttribute{
						Computed: true,
					},
					"cost_status_date": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"cost_status_message": schema.StringAttribute{
						Computed: true,
					},
					"costing_mode": schema.StringAttribute{
						Computed: true,
					},
					"credential": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"zone_credential_1": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"zone_credential_2": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"dark_image_path": schema.StringAttribute{
						Computed:    true,
						Description: `Dark logo image URL`,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"domain_name": schema.StringAttribute{
						Computed: true,
					},
					"enabled": schema.BoolAttribute{
						Computed: true,
					},
					"external_id": schema.StringAttribute{
						Computed: true,
					},
					"groups": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"account_id": schema.Int64Attribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"guidance_mode": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"image_path": schema.StringAttribute{
						Computed:    true,
						Description: `Logo image URL`,
					},
					"inventory_level": schema.StringAttribute{
						Computed: true,
					},
					"last_sync": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"last_sync_duration": schema.Int64Attribute{
						Computed: true,
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"location": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"network_domain": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"network_server": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"next_run_date": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"owner": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"provisioning_proxy": schema.StringAttribute{
						Computed: true,
					},
					"region_code": schema.StringAttribute{
						Computed: true,
					},
					"scale_priority": schema.Int64Attribute{
						Computed: true,
					},
					"security_mode": schema.StringAttribute{
						Computed: true,
					},
					"security_server": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"server_count": schema.Int64Attribute{
						Computed: true,
					},
					"service_version": schema.StringAttribute{
						Computed: true,
					},
					"stats": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"server_counts": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"all": schema.Int64Attribute{
										Computed: true,
									},
									"baremetal": schema.Int64Attribute{
										Computed: true,
									},
									"container_host": schema.Int64Attribute{
										Computed: true,
									},
									"host": schema.Int64Attribute{
										Computed: true,
									},
									"hypervisor": schema.Int64Attribute{
										Computed: true,
									},
									"unmanaged": schema.Int64Attribute{
										Computed: true,
									},
									"vm": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
						},
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"status_date": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"status_message": schema.StringAttribute{
						Computed: true,
					},
					"storage_mode": schema.StringAttribute{
						Computed: true,
					},
					"timezone": schema.StringAttribute{
						Computed: true,
					},
					"user_data_linux": schema.StringAttribute{
						Computed: true,
					},
					"user_data_windows": schema.StringAttribute{
						Computed: true,
					},
					"uuid": schema.StringAttribute{
						Computed: true,
					},
					"visibility": schema.StringAttribute{
						Computed: true,
					},
					"zone_type": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"code": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"zone_type_id": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"zone_type": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"code": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"id": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
			},
			"zone_type_id": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional: true,
			},
		},
	}
}

func (r *ZoneResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Newtest)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Newtest, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ZoneResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ZoneResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	zone := *data.ToCreateSDKType()
	request := operations.AddCloudsRequestBody{
		Zone: zone,
	}
	res, err := r.client.Clouds.AddClouds(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AddClouds200ApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.AddClouds200ApplicationJSONObject)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ZoneResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ZoneResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ZoneResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ZoneResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ZoneResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ZoneResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *ZoneResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource zone.")
}
