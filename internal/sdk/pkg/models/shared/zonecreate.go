// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// ZoneCreateConfig - Map containing zone configuration settings. See the section on specific zone types for details.
type ZoneCreateConfig struct {
}

// ZoneCreateCredential - Map containing Credential ID. Setting `type` to `local` means use the values set in the local cloud config instead of associating a credential.
type ZoneCreateCredential struct {
	ID   *int64  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// ZoneCreateVisibility - private or public
type ZoneCreateVisibility string

const (
	ZoneCreateVisibilityPrivate ZoneCreateVisibility = "private"
	ZoneCreateVisibilityPublic  ZoneCreateVisibility = "public"
)

func (e ZoneCreateVisibility) ToPointer() *ZoneCreateVisibility {
	return &e
}

func (e *ZoneCreateVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public":
		*e = ZoneCreateVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoneCreateVisibility: %v", v)
	}
}

// ZoneCreateZoneType2 - Map containing the Cloud (zone) code name. See the zone-types API to fetch a list of all available Cloud (zone) types and their codes.
type ZoneCreateZoneType2 struct {
	Code *string `json:"code,omitempty"`
}

// ZoneCreateZoneType1 - Map containing the Cloud (zone) type ID. See the zone-types API to fetch a list of all available Cloud (zone) types and their IDs.
type ZoneCreateZoneType1 struct {
	ID *int64 `json:"id,omitempty"`
}

type ZoneCreateZoneTypeType string

const (
	ZoneCreateZoneTypeTypeZoneCreateZoneType1 ZoneCreateZoneTypeType = "zoneCreate_zoneType_1"
	ZoneCreateZoneTypeTypeZoneCreateZoneType2 ZoneCreateZoneTypeType = "zoneCreate_zoneType_2"
)

type ZoneCreateZoneType struct {
	ZoneCreateZoneType1 *ZoneCreateZoneType1
	ZoneCreateZoneType2 *ZoneCreateZoneType2

	Type ZoneCreateZoneTypeType
}

func CreateZoneCreateZoneTypeZoneCreateZoneType1(zoneCreateZoneType1 ZoneCreateZoneType1) ZoneCreateZoneType {
	typ := ZoneCreateZoneTypeTypeZoneCreateZoneType1

	return ZoneCreateZoneType{
		ZoneCreateZoneType1: &zoneCreateZoneType1,
		Type:                typ,
	}
}

func CreateZoneCreateZoneTypeZoneCreateZoneType2(zoneCreateZoneType2 ZoneCreateZoneType2) ZoneCreateZoneType {
	typ := ZoneCreateZoneTypeTypeZoneCreateZoneType2

	return ZoneCreateZoneType{
		ZoneCreateZoneType2: &zoneCreateZoneType2,
		Type:                typ,
	}
}

func (u *ZoneCreateZoneType) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	zoneCreateZoneType1 := new(ZoneCreateZoneType1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneCreateZoneType1); err == nil {
		u.ZoneCreateZoneType1 = zoneCreateZoneType1
		u.Type = ZoneCreateZoneTypeTypeZoneCreateZoneType1
		return nil
	}

	zoneCreateZoneType2 := new(ZoneCreateZoneType2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneCreateZoneType2); err == nil {
		u.ZoneCreateZoneType2 = zoneCreateZoneType2
		u.Type = ZoneCreateZoneTypeTypeZoneCreateZoneType2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ZoneCreateZoneType) MarshalJSON() ([]byte, error) {
	if u.ZoneCreateZoneType1 != nil {
		return json.Marshal(u.ZoneCreateZoneType1)
	}

	if u.ZoneCreateZoneType2 != nil {
		return json.Marshal(u.ZoneCreateZoneType2)
	}

	return nil, nil
}

type ZoneCreate struct {
	// Specifies which Tenant this cloud should be assigned to
	AccountID *int64 `json:"accountId,omitempty"`
	// Automatically Power on VMs
	AutoRecoverPowerState *bool `json:"autoRecoverPowerState,omitempty"`
	// Optional code for use with policies
	Code *string `json:"code,omitempty"`
	// Map containing zone configuration settings. See the section on specific zone types for details.
	Config *ZoneCreateConfig `json:"config,omitempty"`
	// Map containing Credential ID. Setting `type` to `local` means use the values set in the local cloud config instead of associating a credential.
	Credential *ZoneCreateCredential `json:"credential,omitempty"`
	// Optional description field if you want to put more info there
	Description *string `json:"description,omitempty"`
	// Can be used to disable the cloud
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies which Server group this cloud should be assigned to
	GroupID int64 `json:"groupId"`
	// Linked Account ID (enter commercial ID to get costing for AWS Govcloud)
	LinkedAccountID *int64 `json:"linkedAccountId,omitempty"`
	// Optional location for your cloud
	Location *string `json:"location,omitempty"`
	// A unique name scoped to your account for the cloud
	Name string `json:"name"`
	// Scale Priority
	ScalePriority *int64 `json:"scalePriority,omitempty"`
	// host firewall. `off` or `internal`. a.k.a. "local firewall"
	SecurityMode *string `json:"securityMode,omitempty"`
	// private or public
	Visibility *ZoneCreateVisibility `json:"visibility,omitempty"`
	ZoneType   ZoneCreateZoneType    `json:"zoneType"`
}
