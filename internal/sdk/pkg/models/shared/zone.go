// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/testing/terraform-provider-newtest/internal/sdk/pkg/utils"
	"time"
)

type Account struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *Account) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Account) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type ConfigType string

const (
	ConfigTypeZoneVcenterConfig ConfigType = "zoneVcenterConfig"
	ConfigTypeZoneAwsConfig     ConfigType = "zoneAwsConfig"
	ConfigTypeZoneAzureConfig   ConfigType = "zoneAzureConfig"
	ConfigTypeZoneGcpConfig     ConfigType = "zoneGcpConfig"
)

type Config struct {
	ZoneVcenterConfig *ZoneVcenterConfig
	ZoneAwsConfig     *ZoneAwsConfig
	ZoneAzureConfig   *ZoneAzureConfig
	ZoneGcpConfig     *ZoneGcpConfig

	Type ConfigType
}

func CreateConfigZoneVcenterConfig(zoneVcenterConfig ZoneVcenterConfig) Config {
	typ := ConfigTypeZoneVcenterConfig

	return Config{
		ZoneVcenterConfig: &zoneVcenterConfig,
		Type:              typ,
	}
}

func CreateConfigZoneAwsConfig(zoneAwsConfig ZoneAwsConfig) Config {
	typ := ConfigTypeZoneAwsConfig

	return Config{
		ZoneAwsConfig: &zoneAwsConfig,
		Type:          typ,
	}
}

func CreateConfigZoneAzureConfig(zoneAzureConfig ZoneAzureConfig) Config {
	typ := ConfigTypeZoneAzureConfig

	return Config{
		ZoneAzureConfig: &zoneAzureConfig,
		Type:            typ,
	}
}

func CreateConfigZoneGcpConfig(zoneGcpConfig ZoneGcpConfig) Config {
	typ := ConfigTypeZoneGcpConfig

	return Config{
		ZoneGcpConfig: &zoneGcpConfig,
		Type:          typ,
	}
}

func (u *Config) UnmarshalJSON(data []byte) error {

	zoneGcpConfig := new(ZoneGcpConfig)
	if err := utils.UnmarshalJSON(data, &zoneGcpConfig, "", true, true); err == nil {
		u.ZoneGcpConfig = zoneGcpConfig
		u.Type = ConfigTypeZoneGcpConfig
		return nil
	}

	zoneAwsConfig := new(ZoneAwsConfig)
	if err := utils.UnmarshalJSON(data, &zoneAwsConfig, "", true, true); err == nil {
		u.ZoneAwsConfig = zoneAwsConfig
		u.Type = ConfigTypeZoneAwsConfig
		return nil
	}

	zoneAzureConfig := new(ZoneAzureConfig)
	if err := utils.UnmarshalJSON(data, &zoneAzureConfig, "", true, true); err == nil {
		u.ZoneAzureConfig = zoneAzureConfig
		u.Type = ConfigTypeZoneAzureConfig
		return nil
	}

	zoneVcenterConfig := new(ZoneVcenterConfig)
	if err := utils.UnmarshalJSON(data, &zoneVcenterConfig, "", true, true); err == nil {
		u.ZoneVcenterConfig = zoneVcenterConfig
		u.Type = ConfigTypeZoneVcenterConfig
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Config) MarshalJSON() ([]byte, error) {
	if u.ZoneVcenterConfig != nil {
		return utils.MarshalJSON(u.ZoneVcenterConfig, "", true)
	}

	if u.ZoneAwsConfig != nil {
		return utils.MarshalJSON(u.ZoneAwsConfig, "", true)
	}

	if u.ZoneAzureConfig != nil {
		return utils.MarshalJSON(u.ZoneAzureConfig, "", true)
	}

	if u.ZoneGcpConfig != nil {
		return utils.MarshalJSON(u.ZoneGcpConfig, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Two struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

func (o *Two) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Two) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Two) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type One struct {
	Type *string `json:"type,omitempty"`
}

func (o *One) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type CredentialType string

const (
	CredentialTypeOne CredentialType = "1"
	CredentialTypeTwo CredentialType = "2"
)

type Credential struct {
	One *One
	Two *Two

	Type CredentialType
}

func CreateCredentialOne(one One) Credential {
	typ := CredentialTypeOne

	return Credential{
		One:  &one,
		Type: typ,
	}
}

func CreateCredentialTwo(two Two) Credential {
	typ := CredentialTypeTwo

	return Credential{
		Two:  &two,
		Type: typ,
	}
}

func (u *Credential) UnmarshalJSON(data []byte) error {

	one := new(One)
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = one
		u.Type = CredentialTypeOne
		return nil
	}

	two := new(Two)
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = two
		u.Type = CredentialTypeTwo
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Credential) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Groups struct {
	AccountID *int64  `json:"accountId,omitempty"`
	ID        *int64  `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
}

func (o *Groups) GetAccountID() *int64 {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Groups) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Groups) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type NetworkDomain struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *NetworkDomain) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NetworkDomain) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type NetworkServer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *NetworkServer) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NetworkServer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Owner struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *Owner) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Owner) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type SecurityServer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *SecurityServer) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SecurityServer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type ServerCounts struct {
	All           *int64 `json:"all,omitempty"`
	Baremetal     *int64 `json:"baremetal,omitempty"`
	ContainerHost *int64 `json:"containerHost,omitempty"`
	Host          *int64 `json:"host,omitempty"`
	Hypervisor    *int64 `json:"hypervisor,omitempty"`
	Unmanaged     *int64 `json:"unmanaged,omitempty"`
	VM            *int64 `json:"vm,omitempty"`
}

func (o *ServerCounts) GetAll() *int64 {
	if o == nil {
		return nil
	}
	return o.All
}

func (o *ServerCounts) GetBaremetal() *int64 {
	if o == nil {
		return nil
	}
	return o.Baremetal
}

func (o *ServerCounts) GetContainerHost() *int64 {
	if o == nil {
		return nil
	}
	return o.ContainerHost
}

func (o *ServerCounts) GetHost() *int64 {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *ServerCounts) GetHypervisor() *int64 {
	if o == nil {
		return nil
	}
	return o.Hypervisor
}

func (o *ServerCounts) GetUnmanaged() *int64 {
	if o == nil {
		return nil
	}
	return o.Unmanaged
}

func (o *ServerCounts) GetVM() *int64 {
	if o == nil {
		return nil
	}
	return o.VM
}

type Stats struct {
	ServerCounts *ServerCounts `json:"serverCounts,omitempty"`
}

func (o *Stats) GetServerCounts() *ServerCounts {
	if o == nil {
		return nil
	}
	return o.ServerCounts
}

type ZoneType struct {
	Code *string `json:"code,omitempty"`
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *ZoneType) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *ZoneType) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ZoneType) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Zone struct {
	Account               *Account    `json:"account,omitempty"`
	AccountID             *int64      `json:"accountId,omitempty"`
	AgentMode             *string     `json:"agentMode,omitempty"`
	APIProxy              *string     `json:"apiProxy,omitempty"`
	AutoRecoverPowerState *bool       `json:"autoRecoverPowerState,omitempty"`
	Code                  *string     `json:"code,omitempty"`
	Config                *Config     `json:"config,omitempty"`
	ConsoleKeymap         *string     `json:"consoleKeymap,omitempty"`
	ContainerMode         *string     `json:"containerMode,omitempty"`
	CostLastSync          *time.Time  `json:"costLastSync,omitempty"`
	CostLastSyncDuration  *int64      `json:"costLastSyncDuration,omitempty"`
	CostStatus            *string     `json:"costStatus,omitempty"`
	CostStatusDate        *time.Time  `json:"costStatusDate,omitempty"`
	CostStatusMessage     *string     `json:"costStatusMessage,omitempty"`
	CostingMode           *string     `json:"costingMode,omitempty"`
	Credential            *Credential `json:"credential,omitempty"`
	// Dark logo image URL
	DarkImagePath *string    `json:"darkImagePath,omitempty"`
	DateCreated   *time.Time `json:"dateCreated,omitempty"`
	DomainName    *string    `json:"domainName,omitempty"`
	Enabled       *bool      `json:"enabled,omitempty"`
	ExternalID    *string    `json:"externalId,omitempty"`
	Groups        []Groups   `json:"groups,omitempty"`
	GuidanceMode  *string    `json:"guidanceMode,omitempty"`
	ID            *int64     `json:"id,omitempty"`
	// Logo image URL
	ImagePath         *string         `json:"imagePath,omitempty"`
	InventoryLevel    *string         `json:"inventoryLevel,omitempty"`
	LastSync          *time.Time      `json:"lastSync,omitempty"`
	LastSyncDuration  *int64          `json:"lastSyncDuration,omitempty"`
	LastUpdated       *time.Time      `json:"lastUpdated,omitempty"`
	Location          *string         `json:"location,omitempty"`
	Name              *string         `json:"name,omitempty"`
	NetworkDomain     *NetworkDomain  `json:"networkDomain,omitempty"`
	NetworkServer     *NetworkServer  `json:"networkServer,omitempty"`
	NextRunDate       *time.Time      `json:"nextRunDate,omitempty"`
	Owner             *Owner          `json:"owner,omitempty"`
	ProvisioningProxy *string         `json:"provisioningProxy,omitempty"`
	RegionCode        *string         `json:"regionCode,omitempty"`
	ScalePriority     *int64          `json:"scalePriority,omitempty"`
	SecurityMode      *string         `json:"securityMode,omitempty"`
	SecurityServer    *SecurityServer `json:"securityServer,omitempty"`
	ServerCount       *int64          `json:"serverCount,omitempty"`
	ServiceVersion    *string         `json:"serviceVersion,omitempty"`
	Stats             *Stats          `json:"stats,omitempty"`
	Status            *string         `json:"status,omitempty"`
	StatusDate        *time.Time      `json:"statusDate,omitempty"`
	StatusMessage     *string         `json:"statusMessage,omitempty"`
	StorageMode       *string         `json:"storageMode,omitempty"`
	Timezone          *string         `json:"timezone,omitempty"`
	UserDataLinux     *string         `json:"userDataLinux,omitempty"`
	UserDataWindows   *string         `json:"userDataWindows,omitempty"`
	UUID              *string         `json:"uuid,omitempty"`
	Visibility        *string         `json:"visibility,omitempty"`
	ZoneType          *ZoneType       `json:"zoneType,omitempty"`
	ZoneTypeID        *int64          `json:"zoneTypeId,omitempty"`
}

func (z Zone) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(z, "", false)
}

func (z *Zone) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &z, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Zone) GetAccount() *Account {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *Zone) GetAccountID() *int64 {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Zone) GetAgentMode() *string {
	if o == nil {
		return nil
	}
	return o.AgentMode
}

func (o *Zone) GetAPIProxy() *string {
	if o == nil {
		return nil
	}
	return o.APIProxy
}

func (o *Zone) GetAutoRecoverPowerState() *bool {
	if o == nil {
		return nil
	}
	return o.AutoRecoverPowerState
}

func (o *Zone) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Zone) GetConfig() *Config {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *Zone) GetConsoleKeymap() *string {
	if o == nil {
		return nil
	}
	return o.ConsoleKeymap
}

func (o *Zone) GetContainerMode() *string {
	if o == nil {
		return nil
	}
	return o.ContainerMode
}

func (o *Zone) GetCostLastSync() *time.Time {
	if o == nil {
		return nil
	}
	return o.CostLastSync
}

func (o *Zone) GetCostLastSyncDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.CostLastSyncDuration
}

func (o *Zone) GetCostStatus() *string {
	if o == nil {
		return nil
	}
	return o.CostStatus
}

func (o *Zone) GetCostStatusDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CostStatusDate
}

func (o *Zone) GetCostStatusMessage() *string {
	if o == nil {
		return nil
	}
	return o.CostStatusMessage
}

func (o *Zone) GetCostingMode() *string {
	if o == nil {
		return nil
	}
	return o.CostingMode
}

func (o *Zone) GetCredential() *Credential {
	if o == nil {
		return nil
	}
	return o.Credential
}

func (o *Zone) GetDarkImagePath() *string {
	if o == nil {
		return nil
	}
	return o.DarkImagePath
}

func (o *Zone) GetDateCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateCreated
}

func (o *Zone) GetDomainName() *string {
	if o == nil {
		return nil
	}
	return o.DomainName
}

func (o *Zone) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Zone) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *Zone) GetGroups() []Groups {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *Zone) GetGuidanceMode() *string {
	if o == nil {
		return nil
	}
	return o.GuidanceMode
}

func (o *Zone) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Zone) GetImagePath() *string {
	if o == nil {
		return nil
	}
	return o.ImagePath
}

func (o *Zone) GetInventoryLevel() *string {
	if o == nil {
		return nil
	}
	return o.InventoryLevel
}

func (o *Zone) GetLastSync() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSync
}

func (o *Zone) GetLastSyncDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.LastSyncDuration
}

func (o *Zone) GetLastUpdated() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

func (o *Zone) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *Zone) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Zone) GetNetworkDomain() *NetworkDomain {
	if o == nil {
		return nil
	}
	return o.NetworkDomain
}

func (o *Zone) GetNetworkServer() *NetworkServer {
	if o == nil {
		return nil
	}
	return o.NetworkServer
}

func (o *Zone) GetNextRunDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextRunDate
}

func (o *Zone) GetOwner() *Owner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *Zone) GetProvisioningProxy() *string {
	if o == nil {
		return nil
	}
	return o.ProvisioningProxy
}

func (o *Zone) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *Zone) GetScalePriority() *int64 {
	if o == nil {
		return nil
	}
	return o.ScalePriority
}

func (o *Zone) GetSecurityMode() *string {
	if o == nil {
		return nil
	}
	return o.SecurityMode
}

func (o *Zone) GetSecurityServer() *SecurityServer {
	if o == nil {
		return nil
	}
	return o.SecurityServer
}

func (o *Zone) GetServerCount() *int64 {
	if o == nil {
		return nil
	}
	return o.ServerCount
}

func (o *Zone) GetServiceVersion() *string {
	if o == nil {
		return nil
	}
	return o.ServiceVersion
}

func (o *Zone) GetStats() *Stats {
	if o == nil {
		return nil
	}
	return o.Stats
}

func (o *Zone) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Zone) GetStatusDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StatusDate
}

func (o *Zone) GetStatusMessage() *string {
	if o == nil {
		return nil
	}
	return o.StatusMessage
}

func (o *Zone) GetStorageMode() *string {
	if o == nil {
		return nil
	}
	return o.StorageMode
}

func (o *Zone) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *Zone) GetUserDataLinux() *string {
	if o == nil {
		return nil
	}
	return o.UserDataLinux
}

func (o *Zone) GetUserDataWindows() *string {
	if o == nil {
		return nil
	}
	return o.UserDataWindows
}

func (o *Zone) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *Zone) GetVisibility() *string {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *Zone) GetZoneType() *ZoneType {
	if o == nil {
		return nil
	}
	return o.ZoneType
}

func (o *Zone) GetZoneTypeID() *int64 {
	if o == nil {
		return nil
	}
	return o.ZoneTypeID
}
